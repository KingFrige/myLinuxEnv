" All system-wide defaults are set in $VIMRUNTIME/debian.vim and sourced by
" the call to :runtime you can find below.  If you wish to change any of those
" settings, you should do it in this file (/etc/vim/vimrc), since debian.vim
" will be overwritten everytime an upgrade of the vim packages is performed.
" It is recommended to make changes after sourcing debian.vim since it alters
" the value of the 'compatible' option.

" This line should not be removed as it ensures that various options are
" properly set to work with the Vim-related packages available in Debian.
runtime! debian.vim

" Uncomment the next line to make Vim more Vi-compatible
" NOTE: debian.vim sets 'nocompatible'.  Setting 'compatible' changes numerous
" options, so any other options should be set AFTER setting 'compatible'.
"set compatible

" set background=dark
" Vim5 and later versions support syntax highlighting. Uncommenting the next
" line enables syntax highlighting by default.
syntax enable
syntax on

" If using a dark background within the editing area and syntax highlighting
" turn on this option as well
set background=dark

" Uncomment the following to have Vim jump to the last position when
" reopening a file
"if has("autocmd")
"  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
"endif

" Uncomment the following to have Vim load indentation rules and plugins
" according to the detected filetype.
"if has("autocmd")
"  filetype plugin indent on
"endif

" The following are commented out as they cause vim to behave a lot
" differently from regular Vi. They are highly recommended though.
set showcmd		" Show (partial) command in status line.
set showmatch		" Show matching brackets.
set smartcase		" Do smart case matching
set autowrite		" Automatically save before commands like :next and :make
"set hidden		" Hide buffers when they are abandoned
set mouse=a		" Enable mouse usage (all modes)

" Source a global configuration file if available
if filereadable("/etc/vim/vimrc.local")
  source /etc/vim/vimrc.local
endif

set encoding=utf-8
set fileencodings=ucs-bom,utf-8,cp936
set fileencoding=gb2312
set termencoding=utf-8

set nocompatible              " be iMproved, required

" 定义快捷键的前缀，即<Leader>
"let mapleader=";"


" 开启文件类型侦测
filetype on
" 根据侦测到的不同类型加载对应的插件
filetype plugin on

" 让配置变更立即生效
"autocmd BufWritePost $MYVIMRC source $MYVIMRC

" 开启实时搜索功能
set incsearch
" 搜索时大小写不敏感
set ignorecase
" 关闭兼容模式
 set nocompatible
" vim 自身命令行模式智能补全
set wildmenu

"set foldmethod=indent
set nofoldenable

"可以自己修改vimrc决定是否使用方向键进行上下左右移动
"默认关闭，强迫自己用 hjkl，可以注解
map <Left> <Nop>
map <Right> <Nop>
map <Up> <Nop>
map <Down> <Nop>

" 禁止光标闪烁
"set gcr=a:block-blinkon0
" 禁止显示滚动条
"set guioptions-=l
"set guioptions-=L
"set guioptions-=r
"set guioptions-=R
" 禁止显示菜单和工具条
"set guioptions-=m
"set guioptions-=T



" 总是显示状态栏
set laststatus=2
" 显示光标当前位置
set ruler
" 开启行号显示
set number
" 高亮显示搜索结果
set hlsearch

"Height of command bar
set cmdheight=2

 
"Highlight current line
au WinLeave * set nocursorline nocursorcolumn
au WinEnter * set cursorline cursorcolumn
set cursorline cursorcolumn

"配色方案
" colorscheme solarized
colorscheme molokai
" colorscheme peachpuff

" 设置状态栏主题风格
"let g:Powerline_colorscheme='solarized256'



" 自适应不同语言的智能缩进
filetype indent on
" 将制表符扩展为空格
set expandtab
" 设置编辑时制表符占用空格数
set tabstop=2
" 设置格式化时制表符占用空格数
set shiftwidth=2
" 让 vim 把连续数量的空格视为一个制表符
set softtabstop=2

" 定义快捷键的前缀，即<Leader>
let mapleader=";"



" 随 vim 自启动
"let g:indent_guides_enable_on_vim_startup=1
" 从第二层开始可视化显示缩进
"let g:indent_guides_start_level=2
" 色块宽度
"let g:indent_guides_guide_size=1
" 快捷键 i 开/关缩进可视化
":nmap <silent> <Leader>i <Plug>IndentGuidesToggle


set helplang=cn                             " 中文帮助


"####################  tags  插件 #######################################
"ctags使用配置
"按 Ctrl-F12 即可自动生成 C++ 项目的 tags 文件
"map <C-F12> :!ctags -R --c++-kinds=+p --fields=+iaS --extra=+q .<CR>
"map <C-F12> :!ctags -R --Verilog-kinds=+p --fields=+iaS --extra=+q .<CR>
map <C-F12> :!ctags -R --languages=Verilog  --fields=+iaS --extra=+q .<CR>

"设置查找位置
set tags=tags;

"taglist{
let Tlist_Show_One_File = 1    "只显示当前文件的taglist，默认是显示多个
let Tlist_Exit_OnlyWindow = 1  "如果taglist是最后一个窗口，则退出vim
" let Tlist_Auto_Open = 1        "启动vim后自动打开taglist窗口
" let Tlist_Use_Right_Window = 1 "在右侧窗口中显示taglist
let Tlist_GainFocus_On_ToggleOpen = 1        "打开taglist时，光标保留在taglist窗口
" let Tlist_File_Fold_Auto_Close=1             "自动折叠
" let Tlist_Ctags_Cmd='/home/korben/tools/local/bin/ctags'  "设置ctags命令的位置
" let Tlist_Close_On_Select = 0               "如果想在选择了tag后自动关闭taglist窗口，该参数设置为1
nnoremap <silent> <F9> :TlistToggle<CR><CR>  
                    "设置关闭和打开taglist窗口的快捷键
noremap <F7> :!ctags -R<CR>
                    "更新ctags标签文件快捷键设置
"}
"####################  tags  插件 #######################################



"###################    verilog   start   ##########################
:ab mmcomment /********* comment start ****************<Enter><Enter>********** commet over ****************/

:ab seqlogic always@(posedge clk or negedge rst_n)<Enter>begin<Enter>if(rst_n==1'b0)<Enter>begin<Enter>end<Enter>else<Enter>begin<Enter>end<Enter>end

:ab comlogic always@(*)<Enter>begin<Enter>end
"###################    verilog  end   ##########################



"###################    C code start ##########################
:ab Main #include "all.h"<Enter>void main()<Enter>{<Enter>}
"###################    C code end   ##########################


"###################    set file head start  #########################
autocmd BufNewFile *.v,*.sv,*.cpp,*.c,*.h exec ":call Setfilehead()"
func Setfilehead()
    call append(0, '//***********************************************************************')
    call append(1, '//')
    call append(2, '//      Filename: '.expand("%"))
    call append(3, '//   Description: file function description')
    call append(4, '//')
    call append(5, '//        Author: Korben.Dong - korben.dong@sifive.com')
    call append(6, '//       Version: 0.1')
    call append(7, '//        Create: '.strftime("%Y-%m-%d %H:%M:%S"))
    call append(8, '// Last Modified: '.strftime("%Y-%m-%d %H:%M:%S"))
    call append(9, '//       History: Modify the history')
    call append(10, '//***********************************************************************')
"    call append(11, '')
endfunc

map <F3> :call Setfilehead()<CR>:11<CR>o
"###################    set file head end   ##########################


"###################    set stress comment start  #########################
func SetComment()
    call append(line(".")  , '//******************************************************')
    call append(line(".")+1, '//******************************************************')
endfunc

map <F4> :call SetComment()<CR>j<CR>O
"###################    set stress comment end   ##########################


"###################    set main start  #########################
func SetMain()
    call append(line(".")  , '#include all.h')
    call append(line(".")+1, '')
    call append(line(".")+2, 'void main()')
    call append(line(".")+3, '{')
    call append(line(".")+4, '')
    call append(line(".")+5, '    sim_pass();')
    call append(line(".")+6, '}')
endfunc


map <F6> :call SetMain()<CR>4j<CR>O
"###################    set main end   ##########################


map <F8> :%!python3 -m json.tool<CR>
